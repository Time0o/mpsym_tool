#!/usr/bin/env python3

import sys

from math import factorial
from os.path import dirname, join, realpath
from random import randint, shuffle

sys.path.insert(1, join(dirname(realpath(__file__)), '..'))

from modules.args import NiceArgumentParser
from modules.perm import cycle_form
from modules.run import normalize_gap_output, run_gap
from modules.util import error, usage


USAGE = usage(__file__, """[--degree-min DEGREE_MIN]
                           [--degree-max DEGREE_MAX]
                           [--num-generators-min NUM_GENERATORS_MIN]
                           [--num-generators-max NUM_GENERATORS_MAX]
                           NUM_PERM_GROUPS""")

DESC = "Generate random permutation groups"

GAP_CMD = \
"""generating_sets:=[{}];

   for generating_set in generating_sets do
     degree:=generating_set[1];
     generators:=generating_set[2];

     g:=Group(generators);
     Print("degree:", degree, ",order:", Size(g), ",gens:", GeneratorsOfGroup(g), "\\n");
   od;"""


def random_perm(degree):
    id_domain = list(range(1, degree + 1))
    domain = id_domain[:]

    while domain == id_domain:
        shuffle(domain)

    return cycle_form(domain)


def random_perm_groups(degree_min,
                       degree_max,
                       num_generators_min,
                       num_generators_max,
                       num_perm_groups):

    generating_sets = []

    for _ in range(num_perm_groups):
        degree = randint(degree_min, degree_max)

        num_generators = min(randint(num_generators_min, num_generators_max),
                             factorial(degree) - 1)

        generating_set = set()

        for _ in range(num_generators):
            while True:
                generator = random_perm(degree)

                if generator not in generating_set:
                    generating_set.add(generator)
                    break

        generating_sets.append(
            'Tuple([{}, [{}]])'.format(degree, ','.join(generating_set)))

    script = GAP_CMD.format(','.join(generating_sets))

    return normalize_gap_output(run_gap(script).replace(' ', ''))


if __name__ == '__main__':
    parser = NiceArgumentParser(usage=USAGE, description=DESC)

    parser.add_argument('--degree-min', type=int, default=2,
        help="minimal degree of permutation group")

    parser.add_argument('--degree-max', type=int, required=True,
        help="maximal degree of permutation group")

    parser.add_argument('--num-generators-min', type=int, default=1,
        help="minimal size of generating set")

    parser.add_argument('--num-generators-max', type=int, default=2,
        help="maximal size of generating set")

    parser.add_argument('num_perm_groups', metavar='NUM_PERM_GROUPS', type=int,
        help="number of permutation groups to be generated")

    ns = parser.parse_args()

    print(random_perm_groups(ns.degree_min,
                             ns.degree_max,
                             ns.num_generators_min,
                             ns.num_generators_max,
                             ns.num_perm_groups))
